knitr::opts_chunk$set(echo = TRUE, root.dir = "~/dropbox/fall2018/ta/pset05/")
load("newspapers.RData")
x <- data.frame(as.matrix(dtm))
x <- data.frame(matrix(dtm))
View(x)
x <- as.matrix(dtm)
View(x)
knitr::opts_chunk$set(echo = TRUE, root.dir = "~/dropbox/fall2018/ta/pset05/")
load("newspapers.RData")
hist(papers$nslant, xlab = "Slant", main = "Histogram of slant variable")
abline(v = median(papers$nslant))
left <- papers[papers$nslant==min(papers$nslant), c("paper", "city", "state", "nslant")]
right <- papers[papers$nslant==max(papers$nslant), c("paper", "city", "state", "nslant")]
left
right
slant.cong.s <- tapply(cong$cslant[cong$chamber=="S"],
cong$state[cong$chamber=="S"], mean, na.rm=T)
slant.cong.h <- tapply(cong$cslant[cong$chamber=="H"],
cong$state[cong$chamber=="H"], mean, na.rm=T)
slant.cong.s
slant.news <- tapply(papers$nslant, papers$state, mean)
slant.news # slant.news has DC while slant.cong doesn't, so removing DC
slant.news <- slant.news[-8]
plot(slant.cong.s, slant.news, ylab="Newspaper slant", xlab="Senate slant",
xlim=c(0.3, 0.75), main="Average slant by state, Senate vs. Media")
abline(lm(slant.news ~ slant.cong.s), col="red")
plot(slant.cong.h, slant.news, ylab="Newspaper slant", xlab="House slant",
xlim=c(0.3, 0.75), main="Average slant by state, House vs. Media")
abline(lm(slant.news ~ slant.cong.h), col="green")
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE, root.dir = "~/dropbox/fall2018/ta/pset05/")
load("newspapers.RData")
hist(papers$nslant, xlab = "Slant", main = "Histogram of slant variable")
abline(v = median(papers$nslant))
left <- papers[papers$nslant==min(papers$nslant), c("paper", "city", "state", "nslant")]
right <- papers[papers$nslant==max(papers$nslant), c("paper", "city", "state", "nslant")]
left
right
slant.cong.s <- tapply(cong$cslant[cong$chamber=="S"],
cong$state[cong$chamber=="S"], mean, na.rm=T)
slant.cong.h <- tapply(cong$cslant[cong$chamber=="H"],
cong$state[cong$chamber=="H"], mean, na.rm=T)
slant.cong.s
slant.news <- tapply(papers$nslant, papers$state, mean)
slant.news # slant.news has DC while slant.cong doesn't, so removing DC
slant.news <- slant.news[-8]
plot(slant.cong.s, slant.news, ylab="Newspaper slant", xlab="Senate slant",
xlim=c(0.3, 0.75), main="Average slant by state, Senate vs. Media")
abline(lm(slant.news ~ slant.cong.s), col="red")
plot(slant.cong.h, slant.news, ylab="Newspaper slant", xlab="House slant",
xlim=c(0.3, 0.75), main="Average slant by state, House vs. Media")
abline(lm(slant.news ~ slant.cong.h), col="green")
library(tm)
tf.idf <- as.matrix(weightTfIdf(dtm))
tf.idf[1:10, 1:10]
colnames(tf.idf)
colnames(tf.idf)[1:100]
knitr::opts_chunk$set(echo = TRUE)
library(stm)
data("gadarian")
rm(list = ls())
library(stm)
data("gadarian")
summary(gadarian)
View(gadarian)
docs <- gadarian$open.ended.response
docs <- gadarian$open.ended.response[1:25]
docs
rm(list = ls())
set.seed(12345)
#install.packages("stm")
library(stm)
data("gadarian")
docs <- gadarian$open.ended.response
## skipping this step
## not important to know this code
## data comes pre-processed on homework
## install.packages("tm")
library(tm)
corp <- Corpus(VectorSource(docs))
params <- list(removeNumbers = TRUE,
stemming = TRUE,
stopwords = TRUE)
dtm <- DocumentTermMatrix(corp, control = params)
dtm <- removeSparseTerms(dtm, .975)
dtm_mat <- as.matrix(dtm)
dtm_mat[1:5, 1:5]
dtm_tfidf <- as.matrix(weightTfIdf(dtm))
dtm_tfidf[1:5, 1:5]
set.seed(1)
ex_data <- cbind(c(rnorm(10, 1, 1), rnorm(10, 4, 1)),
c(rnorm(10, 1, 1), rnorm(10, 4, 1)))
results <- kmeans(ex_data, centers = 2)
plot(ex_data, col = ifelse(results$cluster == 1, "blue", "green"))
points(results$centers, col = c("blue", "green"), pch = "+", cex = 2)
dim(dtm_mat)
set.seed(2342)
doc_results <- kmeans(dtm_tfidf, centers = 2)
doc_results$centers[1,]
head(doc_results$centers[1,]) ## first centroid
head(doc_results$centers[1,]) ## first centroid
head(doc_results$centers[2,])
doc_results$cluster
table(doc_results$cluster) ## how many assigned to each cluster?
colnames(dtm)[order(doc_results$centers[1,], decreasing = TRUE)][1:10]
colnames(dtm)[order(doc_results$centers[2,], decreasing = TRUE)][1:10]
## skipping this step
## not important to know this code
## data comes pre-processed on homework
# install.packages("tm")
library(tm)
corp <- Corpus(VectorSource(docs))
params <- list(removeNumbers = TRUE,
stemming = TRUE,
stopwords = TRUE)
dtm <- DocumentTermMatrix(corp, control = params)
dtm <- removeSparseTerms(dtm, .975)
dtm_mat <- as.matrix(dtm)
dtm_mat[1:5, 1:5]
set.seed(1)
ex_data <- cbind(c(rnorm(10, 1, 1), rnorm(10, 4, 1)),
c(rnorm(10, 1, 1), rnorm(10, 4, 1)))
results <- kmeans(ex_data, centers = 2)
dtm_mat[1:5, 1:10]
dtm_mat[1:5, 1:10]
set.seed(2342)
doc_results <- kmeans(dtm_tfidf, centers = 2)
doc_results$cluster
table(doc_results$cluster) ## how many assigned to each cluster?
View(ex_data)
View(dtm_mat)
plot(ex_data, col = ifelse(results$cluster == 1, "blue", "green"))
points(results$centers, col = c("blue", "green"), pch = "+", cex = 2)
doc_results$centers[1,]
head(doc_results$centers[1,]) ## first centroid
head(doc_results$centers[2,])
head(doc_results$centers[1,]) ## first centroid
head(doc_results$centers[2,])
doc_results$cluster
colnames(dtm)[order(doc_results$centers[1,], decreasing = TRUE)][1:10]
colnames(dtm)[order(doc_results$centers[1,], decreasing = TRUE)][1:10]
colnames(dtm)[order(doc_results$centers[2,], decreasing = TRUE)][1:10]
